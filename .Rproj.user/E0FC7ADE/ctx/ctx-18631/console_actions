{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.0.2 (2020-06-22) -- \"Taking Off Again\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from C:/Users/matt_/Documents/Github/ITNr/.RData]\n\n\nRestarting R session...\n\n",
        "> ",
        "library(ITNr)",
        "Loading required package: network\n",
        "network: Classes for Relational Data\nVersion 1.16.0 created on 2019-11-30.\ncopyright (c) 2005, Carter T. Butts, University of California-Irvine\n                    Mark S. Handcock, University of California -- Los Angeles\n                    David R. Hunter, Penn State University\n                    Martina Morris, University of Washington\n                    Skye Bender-deMoll, University of Washington\n For citation information, type citation(\"network\").\n Type help(\"network-package\") to get started.\n\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(ITNr)",
        "> ",
        "mat1<- matrix(round(runif(10*10)), 10, 10)",
        "> ",
        " rownames(mat1)<-LETTERS[1:10]",
        "> ",
        " colnames(mat1)<-LETTERS[1:10]",
        "> ",
        " mat2<- matrix(round(runif(10*10)), 10, 10)",
        "> ",
        " rownames(mat2)<-LETTERS[10:19]",
        "> ",
        " colnames(mat2)<-LETTERS[10:19]",
        "> ",
        "    # wrap in list",
        "> ",
        "    sources <- list()",
        "> ",
        "    sources[[1]] <- source",
        "> ",
        "    sources.initialtype <- \"matrix\"",
        "> ",
        "    # wrap in list",
        "> ",
        "    targets <- list()",
        "> ",
        "    targets[[1]] <- target",
        "> ",
        "    targets.initialtype <- \"matrix\"",
        "> ",
        "  # make sure that both lists (sources and targets) have the same length",
        "> ",
        "  if (length(sources) == length(targets)) {",
        "+ ",
        "    # OK; do nothing",
        "+ ",
        "  } else if (length(sources) == 1) {",
        "+ ",
        "    for (i in 2:length(targets)) {",
        "+ ",
        "      sources[[i]] <- sources[[1]]",
        "+ ",
        "    }",
        "+ ",
        "  } else if (length(targets) == 1) {",
        "+ ",
        "    for (i in 2:length(sources)) {",
        "+ ",
        "      targets[[i]] <- targets[[1]]",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    stop(\"Different numbers of sources and targets were provided.\")",
        "+ ",
        "  }",
        "NULL\n",
        "> ",
        "  # convert each item if necessary and save nodal attributes",
        "> ",
        "  sources.attribnames <- list()  # names of additional vertex attributes",
        "> ",
        "  sources.attributes <- list()  # additional vertex attributes",
        "> ",
        "  sources.types <- list()  # matrix, network etc.",
        "> ",
        "  sources.onemode <- list()  # is the source network a one-mode network?",
        "> ",
        "  sources.directed <- list()  # is the source network directed?",
        "> ",
        "  sources.matrixnames <- list()  # names of additional matrices",
        "> ",
        "  sources.matrices <- list()  # additional matrices stored in the source network",
        "> ",
        "  targets.attribnames <- list()  # names of additional vertex attributes",
        "> ",
        "  targets.attributes <- list()  # additional vertex attributes",
        "> ",
        "  targets.types <- list()  # matrix, network etc.",
        "> ",
        "  targets.onemode <- list()  # is the target network a one-mode network?",
        "> ",
        "  targets.directed <- list()  # is the source network directed?",
        "> ",
        "  #  targets.types[[i]] <- class(targets[[i]])",
        "> ",
        "  #  if (class(targets[[i]]) == \"matrix\") {",
        "> ",
        "  #    targets.onemode[[i]] <- TRUE#is.mat.onemode(targets[[i]])",
        "> ",
        "  #    targets.directed[[i]] <- TRUE#is.mat.directed(targets[[i]])",
        "> ",
        "  #  } else {",
        "> ",
        "  #    targets[[i]] <- as.matrix(targets[[i]], ncol = 1)",
        "> ",
        "  #  }",
        "> ",
        "  }",
        "Error: unexpected '}' in \"  }\"\n",
        "> ",
        "  # impute row or column labels if only one of them is present",
        "> ",
        "  for (i in 1:length(sources)) {",
        "+ ",
        "    if (is.null(rownames(sources[[i]])) && !is.null(colnames(sources[[i]])) &&",
        "+ ",
        "        nrow(sources[[i]]) == ncol(sources[[i]])) {",
        "+ ",
        "      rownames(sources[[i]]) <- colnames(sources[[i]])",
        "+ ",
        "    }",
        "+ ",
        "    if (is.null(colnames(sources[[i]])) && !is.null(rownames(sources[[i]])) &&",
        "+ ",
        "        nrow(sources[[i]]) == ncol(sources[[i]])) {",
        "+ ",
        "      colnames(sources[[i]]) <- rownames(sources[[i]])",
        "+ ",
        "    }",
        "+ ",
        "    if (is.null(rownames(targets[[i]])) && !is.null(colnames(targets[[i]])) &&",
        "+ ",
        "        nrow(targets[[i]]) == ncol(targets[[i]])) {",
        "+ ",
        "      rownames(targets[[i]]) <- colnames(targets[[i]])",
        "+ ",
        "    }",
        "+ ",
        "    if (is.null(colnames(targets[[i]])) && !is.null(rownames(targets[[i]])) &&",
        "+ ",
        "        nrow(targets[[i]]) == ncol(targets[[i]])) {",
        "+ ",
        "      colnames(targets[[i]]) <- rownames(targets[[i]])",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "  # throw error if there are duplicate names (first sources, then targets)",
        "> ",
        "  for (i in 1:length(sources)) {",
        "+ ",
        "    if (class(sources[[i]]) %in% c(\"matrix\", \"data.frame\")) {",
        "+ ",
        "      # row names",
        "+ ",
        "      if (!is.null(rownames(sources[[i]]))) {",
        "+ ",
        "        test.actual <- nrow(sources[[i]])",
        "+ ",
        "        test.unique <- length(unique(rownames(sources[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate source row names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate source row name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "      # column names",
        "+ ",
        "      if (!is.null(colnames(sources[[i]]))) {",
        "+ ",
        "        test.actual <- ncol(sources[[i]])",
        "+ ",
        "        test.unique <- length(unique(colnames(sources[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate source column names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate source column name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else {",
        "+ ",
        "      # vector names",
        "+ ",
        "      if (!is.null(names(sources[[i]]))) {",
        "+ ",
        "        test.actual <- length(sources[[i]])",
        "+ ",
        "        test.unique <- length(unique(names(sources[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate source names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate source name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "Warning message:\n",
        "In if (class(sources[[i]]) %in% c(\"matrix\", \"data.frame\")) { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "> ",
        "  for (i in 1:length(targets)) {",
        "+ ",
        "    if (class(targets[[i]]) %in% c(\"matrix\", \"data.frame\")) {",
        "+ ",
        "      # row names",
        "+ ",
        "      if (!is.null(rownames(targets[[i]]))) {",
        "+ ",
        "        test.actual <- nrow(targets[[i]])",
        "+ ",
        "        test.unique <- length(unique(rownames(targets[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate target row names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate target row name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "      # column names",
        "+ ",
        "      if (!is.null(colnames(targets[[i]]))) {",
        "+ ",
        "        test.actual <- ncol(targets[[i]])",
        "+ ",
        "        test.unique <- length(unique(colnames(targets[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate target column names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate target column name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else {",
        "+ ",
        "      # vector names",
        "+ ",
        "      if (!is.null(names(targets[[i]]))) {",
        "+ ",
        "        test.actual <- length(targets[[i]])",
        "+ ",
        "        test.unique <- length(unique(names(targets[[i]])))",
        "+ ",
        "        dif <- test.actual - test.unique",
        "+ ",
        "        if (dif > 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there are \", dif,",
        "+ ",
        "                      \" duplicate target names.\"))",
        "+ ",
        "        } else if (dif == 1) {",
        "+ ",
        "          stop(paste0(\"At t = \", i, \", there is \", dif,",
        "+ ",
        "                      \" duplicate target name.\"))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "Warning message:\n",
        "In if (class(targets[[i]]) %in% c(\"matrix\", \"data.frame\")) { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "> ",
        "  # add original labels to saved network attributes (= matrices) if necessary",
        "> ",
        "  for (i in 1:length(sources)) {",
        "+ ",
        "    if (sources.types[[i]] == \"network\" && !is.null(sources.matrices[[i]])",
        "+ ",
        "        && length(sources.matrices[[i]]) > 0) {",
        "+ ",
        "      for (j in 1:length(sources.matrices[[i]])) {",
        "+ ",
        "        if (nrow(as.matrix(sources.matrices[[i]][[j]])) !=",
        "+ ",
        "            nrow(as.matrix(sources[[i]])) ||",
        "+ ",
        "            ncol(as.matrix(sources.matrices[[i]][[j]])) !=",
        "+ ",
        "            ncol(as.matrix(sources[[i]]))) {",
        "+ ",
        "          warning(paste(\"Network attribute\", sources.matrixnames[[i]][j],",
        "+ ",
        "                        \"does not have the same dimensions as the source network at\",",
        "+ ",
        "                        \"time step\", i, \".\"))",
        "+ ",
        "        }",
        "+ ",
        "        if (class(sources.matrices[[i]][[j]]) == \"network\") {",
        "+ ",
        "          if (sources.onemode[[i]] == TRUE) {",
        "+ ",
        "            sources.matrices[[i]][[j]] <- set.vertex.attribute(",
        "+ ",
        "              sources.matrices[[i]][[j]], \"vertex.names\",",
        "+ ",
        "              rownames(as.matrix(sources[[i]])))",
        "+ ",
        "          } else {",
        "+ ",
        "            sources.matrices[[i]][[j]] <- set.vertex.attribute(",
        "+ ",
        "              sources.matrices[[i]][[j]], \"vertex.names\",",
        "+ ",
        "              c(rownames(as.matrix(sources[[i]])),",
        "+ ",
        "                colnames(as.matrix(sources[[i]]))))",
        "+ ",
        "          }",
        "+ ",
        "        } else {",
        "+ ",
        "          rownames(sources.matrices[[i]][[j]]) <-",
        "+ ",
        "            rownames(as.matrix(sources[[i]]))",
        "+ ",
        "          colnames(sources.matrices[[i]][[j]]) <-",
        "+ ",
        "            colnames(as.matrix(sources[[i]]))",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "Error in sources.types[[i]] : subscript out of bounds\n",
        "> ",
        "MATlist<-list(mat1,mat2,mat3)",
        "Error: object 'mat3' not found\n",
        "> ",
        " mat3<- matrix(round(runif(12*12)), 12, 12)",
        "> ",
        " rownames(mat3)<-LETTERS[15:26]",
        "> ",
        " colnames(mat3)<-LETTERS[15:26]",
        "> ",
        "MATlist<-list(mat1,mat2,mat3)",
        "> ",
        "  files2<-MATlist #matrix list",
        "> ",
        "  files2[[j]]<-NULL",
        "> ",
        "  NetMAT<-MATlist[[j]]",
        "Error in MATlist[[j]] : subscript out of bounds\n",
        "> ",
        "  for (z in 1:length(files2)){",
        "+ ",
        "    HMAT<-files2[z]",
        "+ ",
        "    HMAT<-HMAT[[1]]",
        "+ ",
        "    NetMAT<- adjust_mat(NetMAT, HMAT,",
        "+ ",
        "                        remove = FALSE,add=TRUE,",
        "+ ",
        "                        value=0,returnlabels = FALSE)",
        "+ ",
        "  }",
        "Error in adjust_mat(NetMAT, HMAT, remove = FALSE, add = TRUE, value = 0,  : \n  object 'NetMAT' not found\n",
        "> ",
        "j<-1",
        "> ",
        "<",
        "Error: unexpected '<' in \"<\"\n",
        "> ",
        "  files2<-MATlist #matrix list",
        "> ",
        "  files2[[j]]<-NULL",
        "> ",
        "  NetMAT<-MATlist[[j]]",
        "> ",
        "  for (z in 1:length(files2)){",
        "+ ",
        "    HMAT<-files2[z]",
        "+ ",
        "    HMAT<-HMAT[[1]]",
        "+ ",
        "    NetMAT<- adjust_mat(NetMAT, HMAT,",
        "+ ",
        "                        remove = FALSE,add=TRUE,",
        "+ ",
        "                        value=0,returnlabels = FALSE)",
        "+ ",
        "  }",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "  NetMat<-NetMAT[,sort(colnames(NetMAT))]",
        "> ",
        "  NetMAT<-NetMAT[sort(rownames(NetMAT)),]",
        "> ",
        "library(xergm.common)",
        "Loading required package: ergm\n",
        "\nergm: version 3.10.4, created on 2019-06-10\nCopyright (c) 2019, Mark S. Handcock, University of California -- Los Angeles\n                    David R. Hunter, Penn State University\n                    Carter T. Butts, University of California -- Irvine\n                    Steven M. Goodreau, University of Washington\n                    Pavel N. Krivitsky, University of Wollongong\n                    Martina Morris, University of Washington\n                    with contributions from\n                    Li Wang\n                    Kirk Li, University of Washington\n                    Skye Bender-deMoll, University of Washington\n                    Chad Klumb\nBased on \"statnet\" project software (statnet.org).\nFor license and citation information see statnet.org/attribution\nor type citation(\"ergm\").\n\n",
        "NOTE: Versions before 3.6.1 had a bug in the\nimplementation of the bd() constriant which\ndistorted the sampled distribution somewhat. In\naddition, Sampson's Monks datasets had mislabeled\nvertices. See the NEWS and the documentation for\nmore details.\n\n",
        "NOTE: Some common term arguments pertaining to\nvertex attribute and level selection have changed\nin 3.10.0. See terms help for more details. Use\n‘options(ergm.term=list(version=\"3.9.4\"))’ to use\nold behavior.\n\n",
        "\nAttaching package: ‘xergm.common’\n\n",
        "The following object is masked from ‘package:ergm’:\n\n    gof\n\n",
        "> ",
        "?adjust",
        "\nRestarting R session...\n\n",
        "> ",
        "library(ITNr)",
        "\nRestarting R session...\n\n"
    ]
}