}
GROUP_CENT_LIST<-list()
for (i in 1:num_group){
G<-GROUP[[i]]
GM<-dplyr::filter(GROUP_MEM,group==G)
SUB<-igraph::induced_subgraph(gs,GM$name)
GC<-data.frame(name=igraph::V(SUB)$name,
group.out.degree=igraph::degree(SUB,mode = "out"),
group.in.degree=igraph::degree(SUB,mode = "in"),
group.total.degree=igraph::degree(SUB,mode = "total"),
group=rep(G,igraph::vcount(SUB)))
GROUP_CENT_LIST[[i]]<-GC
}
GROUP_CENT_DF<-suppressWarnings(purrr::map_df(GROUP_CENT_LIST,data.frame))
FULL_DF<-merge(FULL_CENT,GROUP_CENT_DF,by="name")
FULL_DF$Internal<-FULL_DF$group.total.degree
FULL_DF$External<-FULL_DF$total.degree-FULL_DF$group.total.degree
FULL_DF$EI<-(FULL_DF$External-FULL_DF$Internal)/FULL_DF$total.degree
View(FULL_DF)
MM<-mixing_matrix_igraph(gs,
attrname)
source("R/mixing_matrix_igraph_function.R")
MM<-mixing_matrix_igraph(gs,
attrname)
#(External-Internal)/External+Internal
MM1<-MM
diag(MM1)<-0
INT<-diag(MM)
#(External-Internal)/External+Internal
MM1<-MM
diag(MM1)<-0
EXT<-rowSums(MM1)
denominator<-EXT+INT
numerator<-EXT-INT
EI_NET<-numerator/denominator
EI_NET<-round(EI_NET,4)
INT<-sum(diag(MM))
#(External-Internal)/External+Internal
MM1<-MM
diag(MM1)<-0
EXT<-rowSums(MM1)
denominator<-EXT+INT
numerator<-EXT-INT
EI_NET<-numerator/denominator
EXT<-rowSums(MM1)
EXT<-sum(rowSums(MM1))
denominator<-EXT+INT
numerator<-EXT-INT
EI_NET<-numerator/denominator
EI_NET<-round(EI_NET,4)
library(ITNr)
??add_tally
library(ITNr)
library(ITNr)
library(ITNr)
data("ELEnet16")
gs<-ELEnet16
attrname<-"regionNAME"
library(dplyr)
H<-c("name",attrname)
DF<-igraph::get.data.frame(gs,what="vertices")
DF1<-DF[,H]
colnames(DF1)<-c("name","attr")
type<-igraph::is_directed(gs)
is.null(igraph::E(gs)$weight)
if (is.null(igraph::E(gs)$weight)==TRUE){
igraph::E(gs)$weight<-rep(igraph::ecount(gs),1)
}else{igraph::E(gs)$weight<-igraph::E(gs)$weight}
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("to","from","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,"to","from"),
length(EL3$from))
View(EL3a)
length(from)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,"to","from"),
length(from))
View(EL3a)
colnames(EL3a)<-c("to","from","weight")
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,to,from),
length(rom))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,to,from),
length(from))
View(EL3a)
?summarise
?group_by
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,.EL3$to,.EL3$from),
length(.EL3from))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,.EL3$to,.EL3$from),
length(.EL3$from))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$to,EL3$from),
length(EL3$from))
View(EL3a)
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$to,EL3$from),
length(from))
View(EL3)
View(EL3a)
EL<-igraph::get.data.frame(gs,what="edges")
View(EL)
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("from","to","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
View(EL3)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(from))
View(EL3a)
?length
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(El[,3]))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(EL3[,3]))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(EL3[,2]))
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(from))
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(to))
View(EL3a)
?group_by
EL3a1<-dplyr::group_by(EL3,EL3$from,EL3$to)
View(EL3a1)
EL3<-EL2[,1:2]
EL3a1<-dplyr::group_by(EL3,EL3$from,EL3$to)
View(EL3a1)
EL3<-EL2[,1:2]
EL3a1<-dplyr::group_by(EL3,from,to)
View(EL3a1)
EL3a1<-dplyr::group_by(EL3,"from","to")
View(EL3a1)
EL3a1<-dplyr::group_by(EL3,EL3$from,EL3$to)
View(ELEnet16)
View(EL3a1)
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
EL3a1<-dplyr::group_by(EL3,EL3$from,EL3$to)
EL3a<-dplyr::summarise(
EL3a1,
length(to))
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(to))
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(to))
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(to))
View(EL3a)
rm(EL3a1)
rm(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,EL3$from,EL3$to),
length(to))
View(EL3a)
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,"from","to"),
length(to))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,from,to),
length(to))
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,from,to),
length(to))
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,from,to),
length(from))
rm(EL3)
rm(EL3a)
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("from","to","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,from,to),
length(from))
View(EL3a)
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("from","to","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
R<-c("from","to")
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,R),
length(from))
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("from","to","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
R<-c("from","to")
EL3a<-dplyr::summarise(
dplyr::group_by(EL3,R),
length(from))
EL3<-EL2[,1:2]
EL3a<-dplyr::summarise(
dplyr::group_by(EL3, rlang::.data$from, rlang::.data$to),
length(from))
?globalVariables
globalVariables(c("to", "from"))
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
?with
EL3b<-add_count(EL3)
View(EL3b)
View(EL3)
EL3<-EL2[,1:2]
EL<-igraph::get.data.frame(gs,what="edges")
PIC<-c("from","to","weight")
EL<-dplyr::select(EL,PIC)
EL2<-EL
EL2$to <- DF1$attr[match(EL2$to, DF1$name)]
EL2$from <- DF1$attr[match(EL2$from, DF1$name)]
EL3<-EL2[,1:2]
View(EL3)
EL3b<-add_count(EL3)
View(EL3b)
EL3b<-add_count(EL3,from)
View(EL3b)
EL3b<-add_count(EL3,c(from,to))
EL3b<-add_count(EL3,c("from","to"))
EL3b<-add_tally(EL3)
View(EL3b)
H<-c("from","to")
EL3c<-plyr::ddply(EL3,H,nrow)
View(EL3c)
myfiles<-list.files("C:\\Users\\ms3453n\\OneDrive - University of Greenwich\\GitHub\\ITNr\\R", full.names = TRUE)
purrr_res<-Filter(function(file) any(grepl("purrr::", readLines(file, warn = FALSE))),
myfiles)%>%as_tibble()
write_csv(purrr_res,"purrr_resITNR.csv")
readr::write_csv(purrr_res,"purrr_resITNR.csv")
EL3c<-plyr::ddply(EL3,HR,nrow)
HR<-c("from","to")
EL3c<-plyr::ddply(EL3,HR,nrow)
colnames(EL3a)<-c("to","from","weight")
HR<-c("from","to")
EL3c<-plyr::ddply(EL3,HR,nrow)
View(EL3c)
colnames(EL3a)<-c("from","to","weight")
EL3a<-plyr::ddply(EL3,HR,nrow)
colnames(EL3a)<-c("from","to","weight")
View(EL3a)
library(plyr)
library(ITNr)
library(ITNr)
library(igraph)
library(ITNr)
WDIDataSeries<-WDI::WDI_data
WDICountryInfo<-WDIDataSeries$country
WD<-as.data.frame(WDICountryInfo,stringsAsFactors = FALSE)
View(WD)
library(ITNr)
WDIDataSeries<-WDI::WDI_data
WDICountryInfo<-WDIDataSeries$country
WD<-as.data.frame(WDICountryInfo,stringsAsFactors = FALSE)
View(WD)
write.csv(WD,"WD.csv")
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
library(igraph)
library(ITNr)
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
V(ITN)$name<-1:vcount(ITN
)
ITNcp<-core_periphery_weighted(ITN,"directed")
ITNcp_df<-ITNcp[[2]]
View(ITNcp_df)
plot9ITN
library(intergraph)
library(GGally)
net<-asNetwork(ITNcp[[1]])
ggnet2(net)
net
ggnet2(net,node.size = 1,node.colour="all_cp")
ggnet2(net,node.size = 3,node.colour="all_cp")
ggnet2(net,node.size = 3,node.colour="in_cp")
gs<-ITNcp[[1]]
V(gs)$all_cp
V(gs)$core<-as.factor(V(gs)$all_cp)
net<-asNetwork(gs)
ggnet2(net,node.size = 3,node.colour="core")
net
ggnet2(net,node.size = 3,node.colour="vertex.names")
ggnet2(net,node.size = 3,node.colour="red")
ggnet2(net,node.size = 3,node.color = "blue")
ggnet2(net,node.size = 3,node.color = "core")
ggnet2(net,node.size = 3,
node.color = "core")+
guides(colour=TRUE)
plot(gs)
library(ITNr)
library(ITNr)
library(ITNr)
library(igraph)
library(ITNr)
data("ELEnet16")
gs<-ELEnet16
cfg <- igraph::cluster_fast_greedy(igraph::as.undirected(gs))
mem<-as.vector(igraph::membership(cfg))
cluster.fast.greedy.mem<-mem
igraph::V(gs)$cluster.fast.greedy.mem<-mem
CSC<-igraph::cluster_spinglass(gs)
CSCmem<-CSC$membership
#spinglass.com<-CSCmem
igraph::V(gs)$spinglass.com<-CSCmem
infomap<-igraph::cluster_infomap(gs, e.weights = igraph::E(gs)$weight,
v.weights = NULL, nb.trials = 10,
modularity = FALSE)
igraph::V(gs)$infomap<-infomap$membership
TAB<-igraph::get.data.frame(gs, what = "vertices")
NAME<-TAB$name
REG<-TAB$region
REG<-as.numeric(REG)
SPIN<-TAB$spinglass.com
INFOmap<-TAB$infomap
GREED<-TAB$cluster.fast.greedy.mem
NG2<-TAB$NewmanGirvan
mat<-matrix(0, nrow=1,ncol = 3)
#dfTEST<-data.frame()
mat[,1]<-GoodmanKruskal::GKtau(REG,SPIN)$tauyx
mat[,2]<-GoodmanKruskal::GKtau(REG,INFOmap)$tauyx
mat[,3]<-GoodmanKruskal::GKtau(REG,GREED)$tauyx
colnames(mat)<-c("RegSpin","RegInfoMap","RegFastGreedy")
rownames(mat)<-"GoodmanKruskal"
View(mat)
spinglass.com<-cbind(NAME,SPIN)
spinglass.com<-as.data.frame(spinglass.com)
infomap<-cbind(NAME,INFOmap)
infomap<-as.data.frame(infomap)
cluster.fast.greedy.mem<-cbind(NAME,GREED)
cluster.fast.greedy.mem<-as.data.frame(cluster.fast.greedy.mem)
mat<-as.data.frame(mat)
RESULTSclu<-list(
"spinglass.com"=spinglass.com,
"infomap"=infomap,
"cluster.fast.greedy.mem"=cluster.fast.greedy.mem,
"Region.Cluster.Correlation.Matrix"=mat)
View(RESULTSclu)
#dfTEST<-data.frame()
ct1<-chisq.test(REG, SPIN)
ct1
library(xergm.common)
?adjust
library(ITNr)
install.packages("blockmodeling")
library(ITNr)
data("ELEnet16")
gs<-ELEnet16
cfg <- igraph::cluster_fast_greedy(igraph::as.undirected(gs))
mem<-as.vector(igraph::membership(cfg))
#cluster.fast.greedy.mem<-mem
igraph::V(gs)$cluster.fast.greedy.mem<-mem
CSC<-igraph::cluster_spinglass(gs)
CSCmem<-CSC$membership
#spinglass.com<-CSCmem
igraph::V(gs)$spinglass.com<-CSCmem
infomap<-igraph::cluster_infomap(gs, e.weights = igraph::E(gs)$weight,
v.weights = NULL, nb.trials = 10,
modularity = FALSE)
igraph::V(gs)$infomap<-infomap$membership
TAB<-igraph::get.data.frame(gs, what = "vertices")
NAME<-TAB$name
REG<-TAB$region
REG<-as.numeric(REG)
SPIN<-TAB$spinglass.com
INFOmap<-TAB$infomap
GREED<-TAB$cluster.fast.greedy.mem
NG2<-TAB$NewmanGirvan
mat<-matrix(0, nrow=1,ncol = 3)
CV1<-cramersV(REG,SPIN)
condition1 <- c(30, 20, 50)
condition2 <- c(35, 30, 35)
condition1 <- c(30, 20, 50)
condition2 <- c(35, 30, 35)
cv.test = function(x,y) {
CV = sqrt(chisq.test(x, y, correct=FALSE)$statistic /
(length(x) * (min(length(unique(x)),length(unique(y))) - 1)))
print.noquote("Cramér V / Phi:")
return(as.numeric(CV))
}
cv.test(condition1,condition2)
install.packages("lsr")
X<-c(condition1,condition2)
cramersV( X )
library(lsr)
cramersV( X )
GoodmanKruskal::GKtau(REG,SPIN)$tauyx
X<-c(REG,SPIN)
cramersV( X )
library(ITNr)
library(ITNr)
mat1<- matrix(round(runif(10*10)), 10, 10)
rownames(mat1)<-LETTERS[1:10]
colnames(mat1)<-LETTERS[1:10]
#'
mat2<- matrix(round(runif(10*10)), 10, 10)
rownames(mat2)<-LETTERS[10:19]
colnames(mat2)<-LETTERS[10:19]
#'
mat3<- matrix(round(runif(12*12)), 12, 12)
rownames(mat3)<-LETTERS[15:26]
colnames(mat3)<-LETTERS[15:26]
#'
#' ##Create matrix list
MATlist<-list(mat1,mat2,mat3)
j<-1
files2<-MATlist #matrix list
files2[[j]]<-NULL
NetMAT<-MATlist[[j]]
z<-1
HMAT<-files2[z]
HMAT<-HMAT[[1]]
NetMAT<- adjust_mat(NetMAT, HMAT,
remove = FALSE,add=TRUE,
value=0,returnlabels = FALSE)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
devtools::build_win()
library(usethis)
library(devtools)
devtools::build_win()
build_win()
devtools::build_win()
build()
library(ITNr)
data("ELEnet16")
gs<-ELEnet16
net <- cbind(igraph::get.edgelist(gs, names=FALSE), igraph::E(gs)$weight)
sum(igraph::degree(gs)==0)==0
net <- cbind(igraph::get.edgelist(gs, names=FALSE), igraph::E(gs)$weight)
net <- tnet::as.tnet(net, type="weighted one-mode tnet")
WeightDegOut<-tnet::degree_w(net,measure=c("degree","output"), type="out")
WeightDegIn<-tnet::degree_w(net,measure=c("degree","output"), type="in")
WeightDegAll<-tnet::degree_w(net,measure=c("degree","output"), type="all")
WeightBet<-tnet::betweenness_w(net)
strength(gs, mode="out")
library(igraph)
strength(gs, mode="out")
View(WeightBet)
View(WeightDegOut)
WeightDegOut<-igraph::strength(g, mode="out")
WeightDegOut<-igraph::strength(gs, mode="out")
WeightDegIn<-igraph::strength(gs, mode="in")
Weighted.Out.Degree<-WeightDegOut
WeightDegAll<-igraph::strength(gs, mode="total")
WeightDegAll<-igraph::strength(gs, mode="total")
betweenness(gs, weights = TRUE,
normalized = FALSE)
betweenness(gs, weights = "weights",
normalized = FALSE)
betweenness(gs, weights = "weight",
normalized = FALSE)
E(gs)
E(gs)$weight
betweenness(gs, weights = E(gs)$weight,
normalized = FALSE)
View(WeightBet)
betweenness(gs, weights = E(gs)$weight,
normalized = TRUE)
WeightBet<-igraph::betweenness(gs, weights = igraph::E(gs)$weight,
normalized = TRUE)
Binary.Out.Degree<-igraph::degree(gs,mode="out")
Binary.In.Degree<-igraph::degree(gs,mode="in")
Binary.Degree.All<-igraph::degree(gs,mode="total")
library(ITNr)
