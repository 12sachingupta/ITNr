package="ITNr",
p_size=14, p_color = "red",
p_y=1.55,
s_x=1,
s_y=0.95,#0.85,
s_width=1.3,
s_height=1.3,
h_fill="white", h_color="red",
filename="man/figures/logo.png")
sticker(R2,
package="ITNr",
p_size=14, p_color = "red",
p_y=1.55,
s_x=1,
s_y=0.95,#0.85,
s_width=1.25,
s_height=1.25,
h_fill="white", h_color="red",
filename="man/figures/logo.png")
sticker(R2,
package="ITNr",
p_size=15, p_color = "red",
p_y=1.55,
s_x=1,
s_y=0.95,#0.85,
s_width=1.2,
s_height=1.2,
h_fill="white", h_color="red",
filename="man/figures/logo.png")
sticker(R2,
package="ITNr",
p_size=15, p_color = "red",
p_y=1.55,
s_x=1,
s_y=0.95,#0.85,
s_width=1.18,
s_height=1.18,
h_fill="white", h_color="red",
filename="man/figures/logo.png")
library(ITNr)
library(ITNr)
library(ITNr)
devtools::release()
library(ITNr)
library(ITNr)
devtools::release()
library(ITNr)
devtools::release()
install.packages(c("digest", "git2r", "mime", "openssl", "R6", "rstudioapi"))
devtools::release()
cap_lat_lon<-base::get("cap_lat_lon")
NAME<-igraph::V(gs)$name
library(ITNr)
data("ELEnet16")
gs<-ELEnet16
NAME<-igraph::V(gs)$name
LATLONGlist<-list()
for (i in 1:length(NAME)){
Hcode<-NAME[[i]]
FILTERgeo<-dplyr::filter(cap_lat_lon,cap_lat_lon$Country.Code==Hcode)
LAT<-isEmpty(FILTERgeo$Latitude[1])
LONG<-isEmpty(FILTERgeo$Longitude[1])
LL<-data.frame(LAT,LONG)
colnames(LL)<-c("LAT","LONG")
LATLONGlist[[i]]<-LL
}
LATLONGdf<-plyr::ldply(LATLONGlist,data.frame)
rownames(LATLONGdf)<-NAME
LATLONGdf$name<-rownames(LATLONGdf)
DISdata<-LATLONGdf
LATLONGdf[is.na(LATLONGdf)]<-"na"
DISdata2<-dplyr::filter(LATLONGdf,LAT!="na")
NOll<-dplyr::filter(LATLONGdf,LATLONGdf$LAT=="na")
NOllnode<-NOll$name
gs2<-igraph::delete_vertices(gs, NOllnode)
gnet<-intergraph::asNetwork(gs2)
network::set.vertex.attribute(gnet,"lat",as.numeric(DISdata2$LAT))
network::set.vertex.attribute(gnet,"lon",as.numeric(DISdata2$LONG))
world1 <- ggplot2::fortify(maps::map("world", plot = FALSE, fill = TRUE))
world <- ggplot2::ggplot(world1,ggplot2:: aes(x = world1$long, y = world1$lat)) +
ggplot2::geom_polygon(ggplot2::aes(group = world1$group),
color = "grey65",#country border colour
fill = "#f9f9f9", size = 0.2)
GGally::ggnetworkmap(world, gnet,size = 2,
node.color = "blue",
segment.color = "#AA555555")
GGally::ggnetworkmap(world)
GGally::ggnetworkmap(world, gnet)
GGally::ggnetworkmap(world, network::gnet)
gnet<-network::as.network(gnet)
network::set.vertex.attribute(gnet,"lat",as.numeric(DISdata2$LAT))
network::set.vertex.attribute(gnet,"lon",as.numeric(DISdata2$LONG))
world1 <- ggplot2::fortify(maps::map("world", plot = FALSE, fill = TRUE))
world <- ggplot2::ggplot(world1,ggplot2:: aes(x = world1$long, y = world1$lat)) +
ggplot2::geom_polygon(ggplot2::aes(group = world1$group),
color = "grey65",#country border colour
fill = "#f9f9f9", size = 0.2)
GGally::ggnetworkmap(world, gnet,size = 2,
node.color = "blue",
segment.color = "#AA555555")
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
?reorder_df
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
?as.data.frame
?as_data_frame
library(ITNr)
library(ITNr)
gs<-erdos.renyi.game(50,0.05,directed = TRUE)
library(igraph)
gs<-erdos.renyi.game(50,0.05,directed = TRUE)
E(gs)$weight<-runif(ecount(ITN), 0, 1)
E(gs)$weight<-runif(ecount(gs), 0, 1)
V(gs)$name<-1:vcount(gs)
type<-"directed"
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
library(ITNr)
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
if (igraph::vcount(neighOUT)>0){
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
} else sigma_out<-0
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
if (igraph::vcount(neighIN)>0){
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
} else sigma_in<-0
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
RESULT<-lapply(RESlist,data.frame)#purrr::map_df(RESlist,data.frame)
RESULT<-lapply(RESlist,as.data.frame)#purrr::map_df(RESlist,data.frame)
RESULT<-purrr::map_df(RESlist,data.frame)
warnings()
View(RESULT)
RESULT
str(RESULT)
.libPaths("F:/R")
library(ITNr)
library(ITNr)
.libPaths("F:/R")
library(ITNr)
.libPaths("F:/R")
library(ITNr)
data("ELEnet16")
G1<-ELEnet16
AggregatesList<-c("USA","CHN")
V(G1)$name %in% AggregatesList
igraph::V(G1)$name %in% AggregatesList
DEL_LIST<-subset(igraph::V(G1)$name,
igraph::V(G1)$name %in% AggregatesList)
DEL_LIST
library(ITNr)
library(ITNr)
library(ITNr)
.libPaths("F:/R")
library(ITNr)
.libPaths("F:/R")
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
library9purr
library(purrr)
#' @title Core-Periphery for Weighted Networks
#'
#' @description This function implements rich club core-periphery algorithm
#' (Ma & Mondragón, 2015) to identify members of the core and periphery in weighted networks
#' @param gs International Trade Network - igraph object.
#' Note for networks not produced using ITNr there needs to be a vertex attribute "name" and edge attribute "weight"
#' @param type directed/undirected
#' @export
#' @return List - 1.)igraph object with core-periphery results added as a node attribute.
#' 2.) Dataframe of core-periphery results.
#' @references Ma A, Mondragón RJ (2015) Rich-Cores in Networks. PLoS ONE 10(3): e0119678. https://doi.org/10.1371/journal.pone.0119678
#' @examples
#' require(igraph)
#' ##Create random International Trade Network (igraph object)
#' ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
#'
#' ##Add edge weights
#' E(ITN)$weight<-runif(ecount(ITN), 0, 1)
#'
#' ##Add vertex names
#' V(ITN)$name<-1:vcount(ITN)
#'
#' ##Implement core-periphery algorithm
#' ITNcp<-core_periphery_weighted(ITN,"directed")
core_periphery_weighted<-function(gs,type){
if (type=="directed"){
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
if (igraph::vcount(neighOUT)>0){
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
} else sigma_out<-0
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
if (igraph::vcount(neighIN)>0){
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
} else sigma_in<-0
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
RESULT<-purrr::map_df(RESlist,data.frame)#plyr::ldply(RESlist,data.frame)
#RESULT<-dplyr::as_data_frame(RESULT)
RANK<-igraph::vcount(gs)+1-rank(DF$Weighted.Degree.All)
RANKout<-igraph::vcount(gs)+1-rank(DF$Weighted.Out.Degree)
RANKin<-igraph::vcount(gs)+1-rank(DF$Weighted.In.Degree)
RESULT_rank<-cbind(RESULT,RANK,RANKout,RANKin)
in_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_in==max(RESULT_rank$sigma_in))[,7]
out_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_out==max(RESULT_rank$sigma_out))[,6]
all_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_all==max(RESULT_rank$sigma_all))[,5]
in_cp<- RANKin
in_cp[in_cp <= in_thres] <- 1
in_cp[in_cp > in_thres] <- 0
out_cp<- RANKout
out_cp[out_cp <= out_thres] <- 1
out_cp[out_cp > out_thres] <- 0
all_cp<- RANK
all_cp[all_cp <= all_thres] <- 1
all_cp[all_cp > all_thres] <- 0
CP_RESULTS_DF<-cbind(RESULT_rank,in_cp,out_cp,all_cp)
NAMES_NODES<-igraph::V(gs)$name
NAMES_NODES<-as.data.frame(NAMES_NODES,stringsAsFactors=FALSE)
colnames(NAMES_NODES)<-"id"
CP_RESULTS_DF2<-merge(NAMES_NODES,CP_RESULTS_DF,
by.x="id",by.y="name",all.x=TRUE)
CP_RESULTS_DF2[is.na(CP_RESULTS_DF2)]<-0
igraph::V(gs)$in_cp<-CP_RESULTS_DF2$in_cp
igraph::V(gs)$out_cp<-CP_RESULTS_DF2$out_cp
igraph::V(gs)$all_cp<-CP_RESULTS_DF2$all_cp
CP_RESULTS<-list(gs,CP_RESULTS_DF2)
return(CP_RESULTS)
}
else if (type=="undirected"){
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
ALLstrength<-dplyr::filter(STRENGTHneighbour,
STRENGTHneighbour$Weighted.Degree.All>=
STRENGTHnode$Weighted.Degree.All)
ALLlist<-unique(c(ALLstrength$name,ego_node))
filter_all<-igraph::induced_subgraph(neigh,vids=ALLlist)
sigma_all<-sum(igraph::E(filter_all)$weight)
RESdf<-data.frame(name=ego_node,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
RESULT<-purrr::map_df(RESlist,data.frame)#plyr::ldply(RESlist,data.frame)
#RESULT<-dplyr::as_data_frame(RESULT)
RANK<-igraph::vcount(gs)+1-rank(DF$Weighted.Degree.All)
RESULT_rank<-cbind(RESULT,RANK)
all_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_all==max(RESULT_rank$sigma_all))[,3]
all_cp<- RANK
all_cp[all_cp <= all_thres] <- 1
all_cp[all_cp > all_thres] <- 0
CP_RESULTS_DF<-cbind(RESULT_rank,all_cp)
NAMES_NODES<-igraph::V(gs)$name
NAMES_NODES<-as.data.frame(NAMES_NODES,stringsAsFactors=FALSE)
colnames(NAMES_NODES)<-"id"
CP_RESULTS_DF2<-merge(NAMES_NODES,CP_RESULTS_DF,
by.x="id",by.y="name",all.x=TRUE)
CP_RESULTS_DF2[is.na(CP_RESULTS_DF2)]<-0
igraph::V(gs)$all_cp<-CP_RESULTS_DF2$all_cp
CP_RESULTS<-list(gs,CP_RESULTS_DF2)
return(CP_RESULTS)
}
else print("Enter a valid network type")
}
data("ELEnet16")
CC<-core_periphery_weighted(ELEnet16,"directed")
CC[[2]]
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
library(igraph)
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
V(ITN)$name<-1:vcount(ITN)
ITNcp<-core_periphery_weighted(ITN,"directed")
warnigns()
warnings()
library(ITNr)
library(igraph)
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
V(ITN)$name<-1:vcount(ITN)
gs<-ITN
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
library9ITNr
library(ITNr)
CENT<-ITNcentrality(gs)
View(CENT)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
View(VERT)
View(DF)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES",all.x=TRUE)
View(DF)
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
View(df1)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
if (igraph::vcount(neighOUT)>0){
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
} else sigma_out<-0
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
if (igraph::vcount(neighIN)>0){
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
} else sigma_in<-0
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
RESlist[[1]]
RESULT<-lapply(RESlist, data.frame)
RESULT<-purrr::map_df(RESlist,data.frame)#plyr::ldply(RESlist,data.frame)
RESULT<-dplyr::as_data_frame(RESULT)
RESULTS<-plyr::ldply(RESlist,data.frame)
View(RESULTS)
#RESULT<-plyr::ldply(RESlist,data.frame)
#RESULT<-dplyr::as_data_frame(RESULT)
RANK<-igraph::vcount(gs)+1-rank(DF$Weighted.Degree.All)
RANKout<-igraph::vcount(gs)+1-rank(DF$Weighted.Out.Degree)
RANKin<-igraph::vcount(gs)+1-rank(DF$Weighted.In.Degree)
RESULT_rank<-cbind(RESULT,RANK,RANKout,RANKin)
in_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_in==max(RESULT_rank$sigma_in))[,7]
out_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_out==max(RESULT_rank$sigma_out))[,6]
all_thres<-dplyr::filter(RESULT_rank,
RESULT_rank$sigma_all==max(RESULT_rank$sigma_all))[,5]
in_cp<- RANKin
in_cp[in_cp <= in_thres] <- 1
in_cp[in_cp > in_thres] <- 0
out_cp<- RANKout
out_cp[out_cp <= out_thres] <- 1
out_cp[out_cp > out_thres] <- 0
all_cp<- RANK
all_cp[all_cp <= all_thres] <- 1
all_cp[all_cp > all_thres] <- 0
CP_RESULTS_DF<-cbind(RESULT_rank,in_cp,out_cp,all_cp)
NAMES_NODES<-igraph::V(gs)$name
NAMES_NODES<-as.data.frame(NAMES_NODES,stringsAsFactors=FALSE)
colnames(NAMES_NODES)<-"id"
CP_RESULTS_DF2<-merge(NAMES_NODES,CP_RESULTS_DF,
by.x="id",by.y="name",all.x=TRUE)
CP_RESULTS_DF2[is.na(CP_RESULTS_DF2)]<-0
igraph::V(gs)$in_cp<-CP_RESULTS_DF2$in_cp
igraph::V(gs)$out_cp<-CP_RESULTS_DF2$out_cp
igraph::V(gs)$all_cp<-CP_RESULTS_DF2$all_cp
CP_RESULTS<-list(gs,CP_RESULTS_DF2)
View(CP_RESULTS_DF2)
