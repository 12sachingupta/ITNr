Closeness<-igraph::closeness(gs, mode="all")
Eigenvector<-igraph::eigen_centrality(gs)$vector
Hub<-igraph::hub_score(gs, weights=NA)$vector
Authority<-igraph::authority_score(gs, weights=NA)$vector
NAMES<-igraph::V(gs)$name
TAB<-cbind(NAMES,Binary.Out.Degree,
Binary.In.Degree,
Binary.Degree.All,
Betweenness,Closeness,Eigenvector,Hub,Authority)
TAB2<-as.matrix(TAB)
mm<-matrix("NA",length(ISOLATES),12)
library(ITNr)
library(ITNr)
library(ITNr)
library(ITNr)
require(igraph)
ITN<-erdos.renyi.game(75,0.05,directed = TRUE)
##Add edge weights
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
##Add edge weights
E(ITN)$weight
##Add vertex names
V(ITN)$name<-1:vcount(ITN)
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
##Add vertex names
V(ITN)$names<-1:vcount(ITN)
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
gs<-ITN
VERT<-igraph::get.data.frame(gs,"vertices")
View(VERT)
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
i<-1
RESlist<-list()
ego_node<-DF$name[[i]]
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
plot(neigh)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
OUTlist<-unique(c(OUTstrength$name,ego_node))
neighOUT
plot(neighOUT)
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighOUT
plot(neighOUT)
vount(neighOUT)
vcount(neighOUT)
no1<-delete.vertices(neighOUT,
V(neighOUT)$names[degree(neighOUT) == 0])
plot(no1)
no1
vcount(no1)
degree(neighOUT)
V(neighOUT)$names[degree(neighOUT) == 0]
V(neighOUT)$degree<-degree(neighOUT)
no1<-delete.vertices(neighOUT,
V(neighOUT)$names[V(neighOUT)$degree(neighOUT) == 0])
no1<-delete.vertices(neighOUT,
V(neighOUT)$names[V(neighOUT)$degree == 0])
plot(no1)
plot(no1)
V(neighOUT)$names[V(neighOUT)$degree == 0]
V(neighOUT)$degree == 0
V(neighOUT)$name[V(neighOUT)$degree == 0]
no1<-delete.vertices(neighOUT,
V(neighOUT)$name[V(neighOUT)$degree == 0])
plot(no1)
library(ITNr)
ITN<-erdos.renyi.game(75,0.05,directed = TRUE)
#'
##Add edge weights
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
#'
##Add vertex names
V(ITN)$name<-1:vcount(ITN)
#'
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
gs<-ITN
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
i<-1
ego_node<-DF$name[[i]]
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
V(neighOUT)$name
V(neighIN)$name
E(neighOUT)
E(neighIN)
plot(neighIN)
plot(neighOUT)
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourOUT
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTstrength$name
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
library(ITNr)
require(igraph)
seed(10)
set.seed(10)
##Create random International Trade Network (igraph object)
ITN<-erdos.renyi.game(75,0.05,directed = TRUE)
#'
##Add edge weights
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
#'
##Add vertex names
V(ITN)$name<-1:vcount(ITN)
#'
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
gs<-ITN
save.image("F:/GITHUB/CP test data.RData")
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
i<-9
ego_node<-DF$name[[i]]
ego_node
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
df2
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
library(ITNr)
library(devtools)
library(usethis)
?use_build_ignore
use_build_ignore("README.Rmd")
use_build_ignore("README.md")
use_build_ignore("README_cache/")
use_build_ignore("README_files/")
library(ITNr)
load("F:/GITHUB/CP test data.RData")
#'
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
##Create random International Trade Network (igraph object)
ITN<-erdos.renyi.game(75,0.05,directed = TRUE)
#'
##Add edge weights
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
#'
##Add vertex names
V(ITN)$name<-1:vcount(ITN)
#'
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
gs<-ITN
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
for (i in 1:length(DF$name)){
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
RESlist[[i]]<-RESdf
}
i<-5
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
neigh<-igraph::graph.data.frame(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
INel
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
neighIN
plot(neighIN)
vcount(neighIN)
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
filter_in
neighIN
INlist
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
vcount(neighIN)
#'
##Implement core-periphery algorithm
ITNcp<-core_periphery_weighted(ITN,"directed")
library(ITNr)
library(ITNr)
.libPaths("F:/R")
library(usethis)
use_build_ignore("NEWS.md")
library(ITNr)
library(ITNr)
.libPaths("F:/R")
library(ITNr)
.libPaths("F:/R")
library(ITNr)
.libPaths("F:/R")
library(ITNr)
install.packages("installr")
library(installr)
install.Rtools()
.libPaths("F:/R")
library(devtools)
library(installr)
??rtools
install.Rtools(TRUE)
library(ITNr)
find_rtools(T)
Sys.getenv("PATH")
Sys.getenv("PATH")
.libPaths("F:/R")
library(ITNr)
library(ITNr)
library(ITNr)
use_cran_comments()
library(devtools)
library(usethis)
use_cran_comments()
?build_win
build_win()
