
library(ITNr)
require(igraph)
#' ##Create random International Trade Network (igraph object)
ITN<-erdos.renyi.game(50,0.05,directed = TRUE)
#'
#' ##Add edge weights
E(ITN)$weight<-runif(ecount(ITN), 0, 1)
#'
#' ##Add vertex names
V(ITN)$name<-1:vcount(ITN)
#'
plot(ITN)
#' ##Implement core-periphery algorithm
library(ITNr)
ITNcp<-core_periphery_weighted(ITN,"directed")
View(ITNcp)
DF1<-ITNcp[[1]]
View(ITNcp)
gs<-ITNcp[[1]]
plot(gs)
V(gs)
V(gs)$core
gs
V(gs)$in_cp
V(gs)$out_cp
V(gs)$all_cp
DF<-ITNcp[[2]]
View(DF)
gs<-ITN
VERT<-igraph::get.data.frame(gs,"vertices")
MINEL<-min(igraph::E(gs)$weight)
igraph::E(gs)$weight<-igraph::E(gs)$weight/MINEL
CENT<-ITNcentrality(gs)
View(CENT)
DF<-merge(VERT,CENT,by.x="name",by.y="NAMES")
DF<-dplyr::filter(DF,DF$Binary.Degree.All!=0)
df1<-igraph::get.data.frame(gs)
RESlist<-list()
i<-1
ego_node<-DF$name[[i]]
ego_node<-as.character(ego_node)
df1a<-dplyr::filter(df1,df1$from==ego_node)
df1b<-dplyr::filter(df1,df1$to==ego_node)
df2<-rbind(df1a,df1b)
View(df2)
neigh<-igraph::graph.data.frame(df2)
plot(neigh)
View(df2)
INel<-igraph::incident_edges(neigh, ego_node, mode = "in")
OUTel<-igraph::incident_edges(neigh, ego_node, mode = "out")
neighOUT<-igraph::delete.edges(neigh,INel[[1]])
neighIN<-igraph::delete.edges(neigh,OUTel[[1]])
plot(neighIN)
plot(neighOUT)
igraph::V(neighOUT)$degree<-igraph::degree(neighOUT)
igraph::V(neighIN)$degree<-igraph::degree(neighIN)
neighOUT<-igraph::delete.vertices(neighOUT,
igraph::V(neighOUT)$name[
igraph::V(neighOUT)$degree == 0
])
neighIN<-igraph::delete.vertices(neighIN,
igraph::V(neighIN)$name[
igraph::V(neighIN)$degree == 0
])
STRENGTHnode<-dplyr::filter(DF,DF$name==DF$name[[i]])
STRENGTHneighbour<-DF[DF$name%in%igraph::V(neigh)$name,]
STRENGTHneighbourOUT<-DF[DF$name%in%igraph::V(neighOUT)$name,]
STRENGTHneighbourIN<-DF[DF$name%in%igraph::V(neighIN)$name,]
OUTstrength<-dplyr::filter(STRENGTHneighbourOUT,
STRENGTHneighbourOUT$Weighted.Out.Degree>=
STRENGTHnode$Weighted.Out.Degree)
OUTlist<-unique(c(OUTstrength$name,ego_node))
OUTlist<-as.character(OUTlist)
if (igraph::vcount(neighOUT)>0){
filter_out<-igraph::induced_subgraph(neighOUT,vids=OUTlist)
sigma_out<-sum(igraph::E(filter_out)$weight)
} else sigma_out<-0
INstrength<-dplyr::filter(STRENGTHneighbourIN,
STRENGTHneighbourIN$Weighted.In.Degree>=
STRENGTHnode$Weighted.In.Degree)
INlist<-unique(c(INstrength$name,ego_node))
INlist<-as.character(INlist)
if (igraph::vcount(neighIN)>0){
filter_in<-igraph::induced_subgraph(neighIN,vids=INlist)
sigma_in<-sum(igraph::E(filter_in)$weight)
} else sigma_in<-0
sigma_all<-sigma_in+sigma_out
RESdf<-data.frame(name=ego_node,
sigma_in=sigma_in,
sigma_out=sigma_out,
sigma_all=sigma_all)
View(RESdf)
View(df2)
